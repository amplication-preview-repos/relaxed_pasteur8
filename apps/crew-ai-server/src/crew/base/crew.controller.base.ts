/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CrewService } from "../crew.service";
import { CrewCreateInput } from "./CrewCreateInput";
import { Crew } from "./Crew";
import { CrewFindManyArgs } from "./CrewFindManyArgs";
import { CrewWhereUniqueInput } from "./CrewWhereUniqueInput";
import { CrewUpdateInput } from "./CrewUpdateInput";
import { AgentFindManyArgs } from "../../agent/base/AgentFindManyArgs";
import { Agent } from "../../agent/base/Agent";
import { AgentWhereUniqueInput } from "../../agent/base/AgentWhereUniqueInput";
import { ResultFindManyArgs } from "../../result/base/ResultFindManyArgs";
import { Result } from "../../result/base/Result";
import { ResultWhereUniqueInput } from "../../result/base/ResultWhereUniqueInput";

export class CrewControllerBase {
  constructor(protected readonly service: CrewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Crew })
  async createCrew(@common.Body() data: CrewCreateInput): Promise<Crew> {
    return await this.service.createCrew({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Crew] })
  @ApiNestedQuery(CrewFindManyArgs)
  async crews(@common.Req() request: Request): Promise<Crew[]> {
    const args = plainToClass(CrewFindManyArgs, request.query);
    return this.service.crews({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Crew })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async crew(
    @common.Param() params: CrewWhereUniqueInput
  ): Promise<Crew | null> {
    const result = await this.service.crew({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Crew })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCrew(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() data: CrewUpdateInput
  ): Promise<Crew | null> {
    try {
      return await this.service.updateCrew({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Crew })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCrew(
    @common.Param() params: CrewWhereUniqueInput
  ): Promise<Crew | null> {
    try {
      return await this.service.deleteCrew({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/agents")
  @ApiNestedQuery(AgentFindManyArgs)
  async findAgents(
    @common.Req() request: Request,
    @common.Param() params: CrewWhereUniqueInput
  ): Promise<Agent[]> {
    const query = plainToClass(AgentFindManyArgs, request.query);
    const results = await this.service.findAgents(params.id, {
      ...query,
      select: {
        createdAt: true,

        crew: {
          select: {
            id: true,
          },
        },

        email: true,
        id: true,
        name: true,
        role: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/agents")
  async connectAgents(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: AgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agents: {
        connect: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/agents")
  async updateAgents(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: AgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agents: {
        set: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/agents")
  async disconnectAgents(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: AgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      agents: {
        disconnect: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/results")
  @ApiNestedQuery(ResultFindManyArgs)
  async findResults(
    @common.Req() request: Request,
    @common.Param() params: CrewWhereUniqueInput
  ): Promise<Result[]> {
    const query = plainToClass(ResultFindManyArgs, request.query);
    const results = await this.service.findResults(params.id, {
      ...query,
      select: {
        createdAt: true,

        crew: {
          select: {
            id: true,
          },
        },

        generatedAt: true,
        id: true,
        output: true,

        task: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/results")
  async connectResults(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: ResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      results: {
        connect: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/results")
  async updateResults(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: ResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      results: {
        set: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/results")
  async disconnectResults(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: ResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      results: {
        disconnect: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }
}
