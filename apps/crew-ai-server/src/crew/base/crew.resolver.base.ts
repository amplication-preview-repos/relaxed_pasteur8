/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Crew } from "./Crew";
import { CrewCountArgs } from "./CrewCountArgs";
import { CrewFindManyArgs } from "./CrewFindManyArgs";
import { CrewFindUniqueArgs } from "./CrewFindUniqueArgs";
import { CreateCrewArgs } from "./CreateCrewArgs";
import { UpdateCrewArgs } from "./UpdateCrewArgs";
import { DeleteCrewArgs } from "./DeleteCrewArgs";
import { AgentFindManyArgs } from "../../agent/base/AgentFindManyArgs";
import { Agent } from "../../agent/base/Agent";
import { ResultFindManyArgs } from "../../result/base/ResultFindManyArgs";
import { Result } from "../../result/base/Result";
import { CrewService } from "../crew.service";
@graphql.Resolver(() => Crew)
export class CrewResolverBase {
  constructor(protected readonly service: CrewService) {}

  async _crewsMeta(
    @graphql.Args() args: CrewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Crew])
  async crews(@graphql.Args() args: CrewFindManyArgs): Promise<Crew[]> {
    return this.service.crews(args);
  }

  @graphql.Query(() => Crew, { nullable: true })
  async crew(@graphql.Args() args: CrewFindUniqueArgs): Promise<Crew | null> {
    const result = await this.service.crew(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Crew)
  async createCrew(@graphql.Args() args: CreateCrewArgs): Promise<Crew> {
    return await this.service.createCrew({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Crew)
  async updateCrew(@graphql.Args() args: UpdateCrewArgs): Promise<Crew | null> {
    try {
      return await this.service.updateCrew({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Crew)
  async deleteCrew(@graphql.Args() args: DeleteCrewArgs): Promise<Crew | null> {
    try {
      return await this.service.deleteCrew(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Agent], { name: "agents" })
  async findAgents(
    @graphql.Parent() parent: Crew,
    @graphql.Args() args: AgentFindManyArgs
  ): Promise<Agent[]> {
    const results = await this.service.findAgents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Result], { name: "results" })
  async findResults(
    @graphql.Parent() parent: Crew,
    @graphql.Args() args: ResultFindManyArgs
  ): Promise<Result[]> {
    const results = await this.service.findResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
